---
import Base from "@/layouts/Base.astro";
import ContentLead from "@/layouts/components/ContentLead.astro";
import ContentSection from "@/layouts/components/ContentSection.astro";
import slideLoop from "@/data/common-slides/show-talk-build-loop.jpeg";
import slideWalk from "@/data/common-slides/walking.jpeg";
import slideEndurance from "@/data/common-slides/endurance.jpeg";
import slideInPerson from "@/data/common-slides/soveng-shirt.jpeg";
import slideCypherpunks from "@/data/common-slides/cypherpunks-write-code.jpeg";
import slideWideOpenSea from "@/data/common-slides/wide-open-sea.jpeg";
import weeklyRhythmData from "@/data/weeklyRhythm.json";
import type { CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";

// Get concept content
const concept = (await getEntry(
  "concept",
  "-index"
)) as CollectionEntry<"concept">;

const { title, meta_title, description, intro, sections } = concept.data;

// Helper function for quotes (empty for now, can be populated later)
const getQuote = (section: string) => {
  return { quote: "", author: "" };
};

// Map image filenames to imported slide objects
const slideMap: Record<string, any> = {
  "show-talk-build-loop.jpeg": slideLoop,
  "walking.jpeg": slideWalk,
  "endurance.jpeg": slideEndurance,
  "soveng-shirt.jpeg": slideInPerson,
  "cypherpunks-write-code.jpeg": slideCypherpunks,
  "wide-open-sea.jpeg": slideWideOpenSea,
  "revealed-on-walk.jpg": slideWalk, // fallback to walking slide
  "smooth-sea.jpg": slideWideOpenSea, // fallback to wide open sea slide
};

// Process sections to add special handling for weekly-loop
const processedSections = sections.map((section: any) => {
  if (section.id === "weekly-loop") {
    // Convert weekly rhythm schedule to bulletpoints
    const scheduleBullets = weeklyRhythmData.schedule.map((item) => 
      `**${item.day}** â€“ ${item.description}`
    );
    return {
      ...section,
      bulletpoints: scheduleBullets
    };
  }
  return section;
});
---

<Base
  title={title}
  meta_title={meta_title}
  description={description}
>
  <!-- Intro Lead Section -->
  <ContentLead
    title={title}
    content={intro.content}
    image={slideMap[intro.image].src}
    quote=""
    author=""
  />

  <!-- Content Sections -->
  {processedSections.map((section: any, index: number) => (
    <ContentSection
      title={section.title}
      content={section.content}
      image={slideMap[section.image]?.src || slideLoop.src}
      index={index}
      id={section.id}
      bulletpoints={section.bulletpoints || []}
      pullquote={{
        quote: "",
        author: "",
        href: section.link
      }}
    />
  ))}
</Base> 