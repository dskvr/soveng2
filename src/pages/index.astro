---
import ImageMod from "@/components/ImageMod.astro";
import Win95Card from "@/components/Win95Card.astro";
import ProjectShowcase from "@/components/ProjectShowcase.astro";
import BaseNoHeader from "@/layouts/BaseNoHeader.astro";
import { markdownify } from "@/lib/utils/textConverter";
import CallToAction from "@/partials/CallToAction.astro";
import Testimonial from "@/partials/Testimonial.astro";
import type { Button, Feature } from "@/types";
import type { CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";
import showcaseProjects from "@/data/showcaseProjects.js";

interface Homepage {
  banner: {
    title: string;
    content: string;
    image: string;
    button: Button;
  };
  features: Feature[];
}

const homepage = (await getEntry(
  "homepage",
  "-index"
)) as CollectionEntry<"homepage">;

const testimonial = (await getEntry(
  "testimonialSection",
  "testimonial"
)) as CollectionEntry<"testimonialSection">;

const call_to_action = (await getEntry(
  "ctaSection",
  "call-to-action"
)) as CollectionEntry<"ctaSection">;

const { banner, features } = homepage.data as Homepage;

// Pre-process markdown content
const bannerTitle = await markdownify(banner.title);
const bannerContent = await markdownify(banner.content);

// Filter for highlighted projects only for homepage
const highlightedProjects = showcaseProjects.filter(project => project.highlight);
---

<BaseNoHeader>
  <!-- Hero Section -->
  <header class="h-screen w-full flex flex-col text-white relative">
    <!-- Red background behind everything -->
    <div class="absolute inset-0 bg-primary" style={{ zIndex: -2 }}></div>
    
    <!-- Background image with mix blend mode -->
    <div
      class="absolute inset-0 bg-center bg-no-repeat pointer-events-none"
      style={{
        backgroundImage: `url('/images/shining-city-in-cyberspace.png')`,
        imageRendering: "pixelated",
        mixBlendMode: "lighten",
        zIndex: -1,
      }}
    ></div>
    
    <!-- Header with logo -->
    <div class="container">
      <div class="flex flex-col sm:flex-row justify-between items-center py-4 gap-1 sm:gap-0">
      <div class="order-2 sm:order-1">Build the tools.</div>
      <img src="/images/sec-05-sec-05-brandmark-white-rgb.svg" alt="Sovereign Engineering" class="w-[2.5rem] sm:w-[3rem] order-1 sm:order-2" />
      <div class="order-3">Ship the future.</div>
      </div>
    </div>

    <div class="w-full flex-grow sm:flex-grow-0 text-center py-2 sm:py-16 flex items-center justify-center">
      <h1 class="text-[8vw] sm:text-[6vw] leading-none">SOVEREIGN ENGINEERING</h1>
    </div>

    <main class="flex-grow">
      <!-- The main content is the background image -->
    </main>

    <!-- Dynamic title section -->
    <div class="w-full text-center py-8">
      <div class="container">
        <div class="text-[3vw] sm:text-[2vw] leading-tight text-white" set:html={bannerTitle}></div>
      </div>
    </div>

    <footer class="w-full">
      <div class="container">
        <div class="flex flex-col sm:flex-row justify-between items-center py-8 gap-4 sm:gap-0">
      <div class="text-center sm:text-left w-full sm:w-1/4 leading-none">
        <p class="m-0 text-balance">
          Six weeks of ideation, experimentation, mentorship, and dialog.
        </p>
      </div>

      <div class="text-center order-first sm:order-none">
        {
          banner.button.enable && (
            <a
              class="btn-retro"
              href={banner.button.link}
              target={
                banner.button.link.startsWith("http") ? "_blank" : "_self"
              }
              rel="noopener"
            >
              {banner.button.label}
            </a>
          )
        }
      </div>

      <div class="text-center sm:text-right w-full sm:w-1/4 leading-none">
        <p class="m-0 text-balance">
          Build applications, services, and businesses for a self-sovereign future.
        </p>
        </div>
      </div>
    </footer>
  </header>
  <!-- /Hero Section -->


  <ProjectShowcase 
    projects={highlightedProjects} 
    showCTA={true}
    darkTheme={true}
    groupByCohort={false}
  />

  <!-- Features -->
  {
    features.map(async (feature, index: number) => {
      const featureTitle = await markdownify(feature.title);
      const featureContent = await markdownify(feature.content);
      const bulletPoints = await Promise.all(
        feature.bulletpoints.map(async (bullet: string) => await markdownify(bullet))
      );
      
      return (
        <section 
          class="section-sm bg-black text-white"
          id={index === 0 ? "what" : index === 1 ? "how" : index === 2 ? "why" : ""}
        >
          <div class="container">
            <div class="row items-center justify-between">
              <div
                class={`mb:md-0 mb-6 md:col-5 ${index % 2 !== 0 && "md:order-2"}`}
              >
                <img
                  src={feature.image}
                  height={480}
                  width={520}
                  alt={feature.title}
                  class="feature-image"
                />
              </div>
              <div class={`md:col-7 lg:col-6 ${index % 2 !== 0 && "md:order-1"}`}>
                <h2 set:html={featureTitle} class="mb-4 text-white uppercase" style="font-size: 2rem;" />
                <p set:html={featureContent} class="mb-8 text-lg text-white" />
                <ul>
                  {bulletPoints.map((bullet: string) => (
                    <li class="flex items-center mb-4 text-white text-lg">
                      <span class="mr-3 flex-shrink-0 text-white">&#10022;</span>
                      <span set:html={bullet} class="text-lg" />
                    </li>
                  ))}
                </ul>
                {feature.button.enable && (
                  <a 
                    class="btn-retro mt-5 inline-block" 
                    href={feature.button.link}
                    target={feature.button.link.startsWith("http") ? "_blank" : "_self"}
                    rel={feature.button.link.startsWith("http") ? "noopener noreferrer" : ""}
                  >
                    {feature.button.label}
                  </a>
                )}
              </div>
            </div>
          </div>
        </section>
      );
    })
  }
  <!-- /Features -->

  <Testimonial testimonial={testimonial} />
  <CallToAction call_to_action={call_to_action} />
</BaseNoHeader>

<style>
  .showcase-logo {
    filter: contrast(1000%) grayscale(100%);
    image-rendering: pixelated;
    image-rendering: crisp-edges;
    transition: filter 0.3s ease;
  }

  .showcase-logo:hover {
    filter: none;
  }

  .feature-image {
    image-rendering: auto !important;
    image-rendering: smooth !important;
    image-rendering: high-quality !important;
    image-rendering: -webkit-optimize-contrast !important;
    max-width: 100%;
    height: auto;
  }
</style>
