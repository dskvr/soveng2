---
import ImageMod from "@/components/ImageMod.astro";
import Win95Card from "@/components/Win95Card.astro";
import Base from "@/layouts/Base.astro";
import FeatureSection from "@/layouts/components/FeatureSection.astro";
import BigBlockQuote from "@/layouts/components/BigBlockQuote.astro";
import { markdownify } from "@/lib/utils/textConverter";
import CallToAction from "@/partials/CallToAction.astro";
import Testimonial from "@/partials/Testimonial.astro";
import type { Button, Feature } from "@/types";
import type { CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";
import weeklyRhythmData from "@/data/weeklyRhythm.json";
import philosophyQuotes from "@/data/philosophy-quotes.json";

interface Homepage {
  banner: {
    title: string;
    content: string;
    image: string;
    button: Button;
  };
  features: Feature[];
}

const homepage = (await getEntry(
  "homepage",
  "-index"
)) as CollectionEntry<"homepage">;

const testimonial = (await getEntry(
  "testimonialSection",
  "testimonial"
)) as CollectionEntry<"testimonialSection">;

const call_to_action = (await getEntry(
  "ctaSection",
  "call-to-action"
)) as CollectionEntry<"ctaSection">;

const { banner, features } = homepage.data as Homepage;

// Pre-process markdown content
const bannerTitle = await markdownify(banner.title);
const bannerContent = await markdownify(banner.content);
---

<Base showCallToAction={false}>
  <!-- Hero Section -->
  <header class="h-screen w-full flex flex-col text-white relative">
    <!-- Red background behind everything -->
    <div class="absolute inset-0 bg-primary" style={{ zIndex: -2 }}></div>

    <!-- Navigation / Logo Row -->
    <div class="container">
      <div class="flex items-center justify-between py-4 gap-3">
        <a href="/projects" class="hover:underline whitespace-nowrap">Build the tools.</a>
        <img
          src="/images/sec-05-sec-05-brandmark-white-rgb.svg"
          alt="Sovereign Engineering"
          class="w-[2.5rem] sm:w-[3rem]"
        />
        <a href="/concept" class="hover:underline whitespace-nowrap">Ship the future.</a>
      </div>
    </div>

    <!-- Hero Title -->
    <div class="w-full text-center py-2 sm:py-16">
      <h1 class="text-[8vw] sm:text-[6vw] leading-none">SOVEREIGN ENGINEERING</h1>
    </div>

    <!-- Image shown as standalone content (never behind text) -->
    <main class="flex-grow flex items-center justify-center">
      <img
        src="/images/shining-city-in-cyberspace.png"
        alt="Person looking at a shining city in cyberspace"
        class="w-full max-w-[90%] sm:max-w-[70%] h-auto pointer-events-none"
        style={{ imageRendering: "pixelated" }}
      />
    </main>

    <!-- Dynamic title section -->
    <div class="w-full text-center py-8">
      <div class="container">
        <div class="mx-auto w-full md:w-1/2 text-[4vw] sm:text-[2.5vw] leading-tight text-white" set:html={bannerTitle}></div>
      </div>
    </div>

    <footer class="w-full">
      <div class="container">
        <div class="flex flex-col sm:flex-row justify-between items-center py-8 gap-4 sm:gap-0">
      <div class="text-center sm:text-left w-full sm:w-1/4 leading-none">
        <p class="m-0 text-balance">
          Six weeks of high-bandwidth ideation, dialog, and experimentation.
        </p>
      </div>

      <div class="text-center order-first sm:order-none">
        {
          banner.button.enable && (
            <a
              class="btn-retro text-lg px-8 py-4"
              href={banner.button.link}
              target={
                banner.button.link.startsWith("http") ? "_blank" : "_self"
              }
              rel="noopener"
            >
              {banner.button.label}
            </a>
          )
        }
      </div>

      <div class="text-center sm:text-right w-full sm:w-1/4 leading-none">
        <p class="m-0 text-balance">
          Build applications and services for a self-sovereign future.
        </p>
        </div>
      </div>
    </footer>
  </header>
  <!-- /Hero Section -->

  <!-- Features -->
  {
    features.map((feature, index: number) => {
      // Handle weekly rhythm or regular bullet points
      let bulletPoints: string[] = [];
      if (feature.weeklyRhythm) {
        bulletPoints = weeklyRhythmData.schedule.map(item => `**${item.day}:** ${item.description}`);
      } else if (feature.bulletpoints) {
        bulletPoints = feature.bulletpoints;
      }
      
      const sectionId = index === 0 ? "what" : index === 1 ? "how" : index === 2 ? "why" : "";
      
      return (
        <>
          <FeatureSection
            title={feature.title}
            content={feature.content}
            image={feature.image}
            bulletpoints={bulletPoints}
            button={feature.button}
            index={index}
            id={sectionId}
          />
          {/* Insert quote after the first feature */}
          {index === 0 && (
            <BigBlockQuote
              quote={philosophyQuotes.find(q => q.id === "saint-exupery")?.quote!}
              author={philosophyQuotes.find(q => q.id === "saint-exupery")?.author!}
              href="/philosophy"
            />
          )}
          {/* Insert Hal Finney quote after the second feature */}
          {index === 1 && (
            <BigBlockQuote
              quote={philosophyQuotes.find(q => q.id === "hal-finney")?.quote!}
              author={philosophyQuotes.find(q => q.id === "hal-finney")?.author!}
              href="/concept"
            />
          )}
        </>
      );
    })
  }
  <!-- /Features -->

  <Testimonial testimonial={testimonial} />
  <CallToAction call_to_action={call_to_action} />
</Base>

<style>
  .showcase-logo {
    filter: contrast(1000%) grayscale(100%);
    image-rendering: pixelated;
    image-rendering: crisp-edges;
    transition: filter 0.3s ease;
  }

  .showcase-logo:hover {
    filter: none;
  }
</style>
